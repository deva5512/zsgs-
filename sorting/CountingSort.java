package Sorting;

import java.util.Arrays;

public class CountingSort {
	public static void main(String[] args) {
		int[] array = { 2, 1 };
		countSort(array);

	}

	// Count sort will work only if we can identify the range of the value
	public static void countSort(int[] nums) {

		// creating the copy of the original array
		int temp[] = nums.clone();

		// finding the range with the help of max and min
		int min = Arrays.stream(nums).min().getAsInt();
		int max = Arrays.stream(nums).max().getAsInt();
		int range = max - min;

		// Creating a count array which is going to count the frequency of the numbers
		int[] count = new int[range + 1];

		// Finding the frequency of the number
		for (int i = 0; i < nums.length; i++) {
			// Index is generated by the value minus the minimum value of the array
			int index = nums[i] - min;

			// Increase the count at the particular index
			count[index]++;
		}

		// Calculating the cumulative count
		for (int i = 1; i < count.length; i++) {
			count[i] += count[i - 1];
		}

		// Reinitializing the sorted order in the original array
		for (int i = temp.length - 1; i >= 0; i--) {
			int index = temp[i] - min;

			// store the value at the index minus one position because of the index starts
			// from 0
			nums[count[index] - 1] = temp[i];
			count[index]--;
		}

		System.out.println(Arrays.toString(nums));
	}

}
